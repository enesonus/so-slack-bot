// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: channels.sql

package db

import (
	"context"
	"time"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (id, channel_name, created_at, workspace_id, bot_token)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, channel_name, created_at, workspace_id, bot_token
`

type CreateChannelParams struct {
	ID          string
	ChannelName string
	CreatedAt   time.Time
	WorkspaceID string
	BotToken    string
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.ID,
		arg.ChannelName,
		arg.CreatedAt,
		arg.WorkspaceID,
		arg.BotToken,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.BotToken,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :one
DELETE FROM channels WHERE id = $1
RETURNING id, channel_name, created_at, workspace_id, bot_token
`

func (q *Queries) DeleteChannel(ctx context.Context, id string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, deleteChannel, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.BotToken,
	)
	return i, err
}

const getChannelByBotToken = `-- name: GetChannelByBotToken :many
SELECT id, channel_name, created_at, workspace_id, bot_token FROM channels WHERE bot_token = $1
`

func (q *Queries) GetChannelByBotToken(ctx context.Context, botToken string) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannelByBotToken, botToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.ChannelName,
			&i.CreatedAt,
			&i.WorkspaceID,
			&i.BotToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
