// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: bots.sql

package db

import (
	"context"
	"time"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots (bot_token, created_at, last_activity_at)
VALUES ($1, $2, $3)
RETURNING id, created_at, last_activity_at, bot_token, workspace_id
`

type CreateBotParams struct {
	BotToken       string
	CreatedAt      time.Time
	LastActivityAt time.Time
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, createBot, arg.BotToken, arg.CreatedAt, arg.LastActivityAt)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastActivityAt,
		&i.BotToken,
		&i.WorkspaceID,
	)
	return i, err
}

const getBotByID = `-- name: GetBotByID :one
SELECT id, created_at, last_activity_at, bot_token, workspace_id FROM bots WHERE id = $1
`

func (q *Queries) GetBotByID(ctx context.Context, id int32) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotByID, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastActivityAt,
		&i.BotToken,
		&i.WorkspaceID,
	)
	return i, err
}

const getBotByToken = `-- name: GetBotByToken :one
SELECT id, created_at, last_activity_at, bot_token, workspace_id FROM bots WHERE bot_token = $1
`

func (q *Queries) GetBotByToken(ctx context.Context, botToken string) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotByToken, botToken)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastActivityAt,
		&i.BotToken,
		&i.WorkspaceID,
	)
	return i, err
}

const getBots = `-- name: GetBots :many
SELECT id, created_at, last_activity_at, bot_token, workspace_id FROM bots
`

func (q *Queries) GetBots(ctx context.Context) ([]Bot, error) {
	rows, err := q.db.QueryContext(ctx, getBots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bot
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastActivityAt,
			&i.BotToken,
			&i.WorkspaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
